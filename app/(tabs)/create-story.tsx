import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { useAppDispatch, useAppSelector } from '@/hooks';
import { RootState } from '@/store';
import { createStory } from '@/store/slices/storySlice';
import { Ionicons } from '@expo/vector-icons';
import { Audio } from 'expo-av';
import * as ImagePicker from 'expo-image-picker';
import { router } from 'expo-router';
import React, { useEffect, useState } from 'react';
import { ActivityIndicator, Alert, Image, Modal, ScrollView, StyleSheet, TextInput, TouchableOpacity, View, useColorScheme } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';

const AGE_CATEGORIES = [
  { id: 'age-2-4', name: 'Ages 2-4' },
  { id: 'age-5-7', name: 'Ages 5-7' },
  { id: 'age-8-10', name: 'Ages 8-10' },
];

const THEME_CATEGORIES = [
  { id: 'adventure', name: 'Adventure' },
  { id: 'fantasy', name: 'Fantasy' },
  { id: 'educational', name: 'Educational' },
  { id: 'mystery', name: 'Mystery' },
  { id: 'science-fiction', name: 'Sci-Fi' },
  { id: 'fairy-tale', name: 'Fairy Tales' },
];

export default function CreateStoryScreen() {
  const dispatch = useAppDispatch();
  const { loading, error } = useAppSelector((state: RootState) => state.stories);
  const { user } = useAppSelector((state: RootState) => state.auth);
  const colorScheme = useColorScheme();
  const isDark = colorScheme === 'dark' ? false : true; // Force light mode by default

  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [tags, setTags] = useState<string[]>([]);
  const [currentTag, setCurrentTag] = useState('');
  const [isPublic, setIsPublic] = useState(true);
  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);
  const [coverImage, setCoverImage] = useState<string | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [recording, setRecording] = useState<Audio.Recording | null>(null);
  const [isRecording, setIsRecording] = useState(false);
  const [showCategoryModal, setShowCategoryModal] = useState(false);
  const [activeTab, setActiveTab] = useState<'age' | 'theme'>('age');

  useEffect(() => {
    if (error) {
      Alert.alert('Error', error);
    }
  }, [error]);

  const handleAddTag = () => {
    if (currentTag.trim() && !tags.includes(currentTag.trim())) {
      setTags([...tags, currentTag.trim()]);
      setCurrentTag('');
    }
  };

  const handleRemoveTag = (tagToRemove: string) => {
    setTags(tags.filter(tag => tag !== tagToRemove));
  };

  const handlePickImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [16, 9],
      quality: 0.8,
    });

    if (!result.canceled) {
      setCoverImage(result.assets[0].uri);
    }
  };

  const handleGenerateStory = async () => {
    if (!title.trim()) {
      Alert.alert('Error', 'Please enter a title first');
      return;
    }

    setIsGenerating(true);
    try {
      // Simulate AI story generation
      await new Promise(resolve => setTimeout(resolve, 2000));
      const generatedContent = `Once upon a time, in a magical world...\n\nThis is a sample AI-generated story based on the title "${title}". In a real implementation, this would be generated by an AI model.`;
      setContent(generatedContent);
    } catch (error) {
      Alert.alert('Error', 'Failed to generate story');
    } finally {
      setIsGenerating(false);
    }
  };

  const toggleCategory = (categoryId: string) => {
    setSelectedCategories(prev => 
      prev.includes(categoryId)
        ? prev.filter(id => id !== categoryId)
        : [...prev, categoryId]
    );
  };

  const handleCreateStory = async () => {
    if (!title.trim() || !content.trim()) {
      Alert.alert('Error', 'Please fill in all required fields');
      return;
    }

    if (selectedCategories.length === 0) {
      Alert.alert('Error', 'Please select at least one category');
      return;
    }

    try {
      const result = await dispatch(createStory({
        title: title.trim(),
        content: content.trim(),
        userId: user?.id || '',
        isPublic,
        tags,
        category: selectedCategories[0],
        coverImage: coverImage || undefined,
        author: user?.username || 'Anonymous',
      })).unwrap();

      if (result) {
        Alert.alert('Success', 'Story created successfully', [
          { text: 'OK', onPress: () => router.back() }
        ]);
      }
    } catch (err) {
      // Error is handled by the useEffect above
    }
  };

  if (loading) {
    return (
      <ThemedView style={[styles.container, styles.loadingContainer]}>
        <ActivityIndicator size="large" color="#e74c3c" />
      </ThemedView>
    );
  }

  return (
    <SafeAreaView style={[styles.safeArea, { backgroundColor: isDark ? '#181A20' : '#F6F7FB' }]}>
      <ScrollView style={{ backgroundColor: isDark ? '#181A20' : '#F6F7FB' }}>
        <ThemedView style={[styles.container, { backgroundColor: isDark ? '#181A20' : '#F6F7FB' }]}>
          <View style={styles.header}>
            <TouchableOpacity
              style={styles.headerButton}
              onPress={() => router.back()}
            >
              <Ionicons name="arrow-back" size={24} color={isDark ? '#fff' : '#23262F'} />
            </TouchableOpacity>
            <ThemedText style={[styles.headerTitle, { color: isDark ? '#fff' : '#23262F' }]}>Create New Story</ThemedText>
            <View style={styles.headerButton} />
          </View>

          <View style={styles.form}>
            <View style={[styles.inputContainer, { backgroundColor: isDark ? '#23262F' : '#fff' }]}>
              <TextInput
                style={[styles.input, { color: isDark ? '#fff' : '#23262F' }]}
                placeholder="Story Title"
                placeholderTextColor={isDark ? '#A6A6A6' : '#666'}
                value={title}
                onChangeText={setTitle}
                editable={!loading}
              />
            </View>

            <View style={styles.categorySection}>
              <View style={styles.categoryHeader}>
                <ThemedText style={[styles.sectionTitle, { color: isDark ? '#fff' : '#23262F' }]}>Categories</ThemedText>
                <TouchableOpacity
                  style={[styles.categoryButton, { backgroundColor: isDark ? '#23262F' : '#f0f0f0' }]}
                  onPress={() => setShowCategoryModal(true)}
                >
                  {selectedCategories.length > 0 ? (
                    <ThemedText style={[styles.categoryButtonText, { color: isDark ? '#A6A6A6' : '#666' }]}>
                      {selectedCategories.length} Selected
                    </ThemedText>
                  ) : (
                    <View style={styles.addCategoryButton}>
                      <Ionicons name="add" size={20} color={isDark ? '#A6A6A6' : '#666'} />
                      <ThemedText style={[styles.categoryButtonText, { color: isDark ? '#A6A6A6' : '#666' }]}>
                        Add Categories
                      </ThemedText>
                    </View>
                  )}
                </TouchableOpacity>
              </View>
              <ScrollView
                horizontal
                showsHorizontalScrollIndicator={false}
                contentContainerStyle={styles.categoriesList}
              >
                {selectedCategories.map(categoryId => {
                  const category = [...AGE_CATEGORIES, ...THEME_CATEGORIES].find(cat => cat.id === categoryId);
                  return category ? (
                    <View key={categoryId} style={[styles.selectedCategory, { backgroundColor: isDark ? '#23262F' : '#f0f0f0' }]}>
                      <ThemedText style={[styles.selectedCategoryText, { color: isDark ? '#A6A6A6' : '#666' }]}>
                        {category.name}
                      </ThemedText>
                      <TouchableOpacity onPress={() => toggleCategory(categoryId)}>
                        <Ionicons name="close" size={16} color={isDark ? '#A6A6A6' : '#666'} />
                      </TouchableOpacity>
                    </View>
                  ) : null;
                })}
              </ScrollView>
            </View>

            <View style={styles.coverImageSection}>
              <ThemedText style={[styles.sectionTitle, { color: isDark ? '#fff' : '#23262F' }]}>Cover Image</ThemedText>
              <TouchableOpacity
                style={[styles.coverImageButton, { backgroundColor: isDark ? '#23262F' : '#f0f0f0' }]}
                onPress={handlePickImage}
                disabled={loading}
              >
                {coverImage ? (
                  <Image source={{ uri: coverImage }} style={styles.coverImage} />
                ) : (
                  <View style={styles.coverImagePlaceholder}>
                    <Ionicons name="image-outline" size={32} color={isDark ? '#A6A6A6' : '#666'} />
                    <ThemedText style={[styles.coverImageText, { color: isDark ? '#A6A6A6' : '#666' }]}>Add Cover Image</ThemedText>
                  </View>
                )}
              </TouchableOpacity>
            </View>

            <View style={styles.contentSection}>
              <View style={styles.contentHeader}>
                <ThemedText style={[styles.sectionTitle, { color: isDark ? '#fff' : '#23262F' }]}>Story Content</ThemedText>
                <TouchableOpacity
                  style={[styles.generateButton, isGenerating && styles.generateButtonDisabled]}
                  onPress={handleGenerateStory}
                  disabled={isGenerating || loading}
                >
                  <Ionicons name="sparkles-outline" size={20} color="#fff" />
                  <ThemedText style={styles.generateButtonText}>
                    {isGenerating ? 'Generating...' : 'Generate with AI'}
                  </ThemedText>
                </TouchableOpacity>
              </View>
              <View style={[styles.inputContainer, { backgroundColor: isDark ? '#23262F' : '#fff' }]}>
                <TextInput
                  style={[styles.input, styles.contentInput, { color: isDark ? '#fff' : '#23262F' }]}
                  placeholder="Write your story here..."
                  placeholderTextColor={isDark ? '#A6A6A6' : '#666'}
                  value={content}
                  onChangeText={setContent}
                  multiline
                  textAlignVertical="top"
                  editable={!loading}
                />
              </View>
            </View>

            <View style={styles.tagSection}>
              <ThemedText style={[styles.sectionTitle, { color: isDark ? '#fff' : '#23262F' }]}>Tags</ThemedText>
              <View style={[styles.inputContainer, { backgroundColor: isDark ? '#23262F' : '#fff' }]}>
                <TextInput
                  style={[styles.input, styles.tagInput, { color: isDark ? '#fff' : '#23262F' }]}
                  placeholder="Add a tag"
                  placeholderTextColor={isDark ? '#A6A6A6' : '#666'}
                  value={currentTag}
                  onChangeText={setCurrentTag}
                  onSubmitEditing={handleAddTag}
                  editable={!loading}
                />
              </View>
              <TouchableOpacity
                style={[styles.addTagButton, !currentTag.trim() && styles.addTagButtonDisabled]}
                onPress={handleAddTag}
                disabled={!currentTag.trim() || loading}
              >
                <Ionicons name="add" size={24} color="#fff" />
                <ThemedText style={styles.addTagButtonText}>Add Tag</ThemedText>
              </TouchableOpacity>

              <View style={styles.tags}>
                {tags.map(tag => (
                  <View key={tag} style={[styles.tag, { backgroundColor: isDark ? '#23262F' : '#f0f0f0' }]}>
                    <ThemedText style={[styles.tagText, { color: isDark ? '#A6A6A6' : '#666' }]}>{tag}</ThemedText>
                    <TouchableOpacity
                      onPress={() => handleRemoveTag(tag)}
                      disabled={loading}
                    >
                      <Ionicons name="close" size={16} color={isDark ? '#A6A6A6' : '#666'} />
                    </TouchableOpacity>
                  </View>
                ))}
              </View>
            </View>

            <View style={styles.privacySection}>
              <ThemedText style={[styles.sectionTitle, { color: isDark ? '#fff' : '#23262F' }]}>Privacy</ThemedText>
              <TouchableOpacity
                style={styles.privacyToggle}
                onPress={() => setIsPublic(!isPublic)}
                disabled={loading}
              >
                <View style={[styles.toggle, isPublic && styles.toggleActive]} />
                <ThemedText style={{ color: isDark ? '#fff' : '#23262F' }}>{isPublic ? 'Public' : 'Private'}</ThemedText>
              </TouchableOpacity>
            </View>

            <TouchableOpacity
              style={[styles.createButton, loading && styles.createButtonDisabled]}
              onPress={handleCreateStory}
              disabled={loading}
            >
              <ThemedText style={styles.createButtonText}>
                {loading ? 'Creating...' : 'Create Story'}
              </ThemedText>
            </TouchableOpacity>
          </View>
        </ThemedView>
      </ScrollView>

      <Modal
        visible={showCategoryModal}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setShowCategoryModal(false)}
      >
        <View style={[styles.modalOverlay, { backgroundColor: 'rgba(0,0,0,0.5)' }]}>
          <View style={[styles.modalContent, { backgroundColor: isDark ? '#23262F' : '#fff' }]}>
            <View style={styles.modalHeader}>
              <ThemedText style={[styles.modalTitle, { color: isDark ? '#fff' : '#23262F' }]}>
                Select Categories
              </ThemedText>
              <TouchableOpacity onPress={() => setShowCategoryModal(false)}>
                <Ionicons name="close" size={24} color={isDark ? '#fff' : '#23262F'} />
              </TouchableOpacity>
            </View>

            <View style={styles.modalTabs}>
              <TouchableOpacity
                style={[styles.modalTab, activeTab === 'age' && styles.activeModalTab]}
                onPress={() => setActiveTab('age')}
              >
                <ThemedText style={[styles.modalTabText, { color: isDark ? '#fff' : '#23262F' }]}>
                  Age Groups
                </ThemedText>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.modalTab, activeTab === 'theme' && styles.activeModalTab]}
                onPress={() => setActiveTab('theme')}
              >
                <ThemedText style={[styles.modalTabText, { color: isDark ? '#fff' : '#23262F' }]}>
                  Themes
                </ThemedText>
              </TouchableOpacity>
            </View>

            <ScrollView style={styles.modalList}>
              {(activeTab === 'age' ? AGE_CATEGORIES : THEME_CATEGORIES).map(category => (
                <TouchableOpacity
                  key={category.id}
                  style={[
                    styles.modalItem,
                    selectedCategories.includes(category.id) && styles.selectedModalItem
                  ]}
                  onPress={() => toggleCategory(category.id)}
                >
                  <ThemedText style={[
                    styles.modalItemText,
                    { color: isDark ? '#fff' : '#23262F' },
                    selectedCategories.includes(category.id) && { color: '#fff' }
                  ]}>
                    {category.name}
                  </ThemedText>
                  {selectedCategories.includes(category.id) && (
                    <Ionicons name="checkmark" size={20} color="#fff" />
                  )}
                </TouchableOpacity>
              ))}
            </ScrollView>

            <TouchableOpacity
              style={styles.modalDoneButton}
              onPress={() => setShowCategoryModal(false)}
            >
              <ThemedText style={styles.modalDoneButtonText}>Done</ThemedText>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
  },
  container: {
    flex: 1,
    padding: 20,
  },
  loadingContainer: {
    justifyContent: 'center',
    alignItems: 'center',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  headerButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: '700',
  },
  form: {
    gap: 20,
  },
  inputContainer: {
    borderRadius: 14,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  input: {
    height: 50,
    paddingHorizontal: 15,
    fontSize: 16,
  },
  contentInput: {
    height: 200,
    paddingTop: 15,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 15,
  },
  categorySection: {
    gap: 10,
  },
  categoriesList: {
    gap: 10,
    paddingRight: 20,
  },
  categoryButton: {
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 20,
  },
  categoryButtonText: {
    fontSize: 14,
  },
  coverImageSection: {
    gap: 10,
  },
  coverImageButton: {
    width: '100%',
    height: 200,
    borderRadius: 12,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  coverImage: {
    width: '100%',
    height: '100%',
  },
  coverImagePlaceholder: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    gap: 10,
  },
  coverImageText: {
    fontSize: 14,
  },
  contentSection: {
    gap: 10,
  },
  contentHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  generateButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#e74c3c',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 8,
    gap: 5,
  },
  generateButtonDisabled: {
    opacity: 0.5,
  },
  generateButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: 'bold',
  },
  tagSection: {
    gap: 10,
  },
  tagInput: {
    flex: 1,
  },
  addTagButton: {
    backgroundColor: '#e74c3c',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    borderRadius: 8,
    marginTop: 10,
    gap: 8,
  },
  addTagButtonDisabled: {
    opacity: 0.5,
  },
  addTagButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  tags: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  tag: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
  },
  tagText: {
    fontSize: 14,
  },
  privacySection: {
    gap: 10,
  },
  privacyToggle: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
  },
  toggle: {
    width: 40,
    height: 24,
    borderRadius: 12,
    backgroundColor: '#ccc',
    padding: 2,
  },
  toggleActive: {
    backgroundColor: '#e74c3c',
  },
  createButton: {
    backgroundColor: '#e74c3c',
    height: 50,
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  createButtonDisabled: {
    opacity: 0.5,
  },
  createButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  modalOverlay: {
    flex: 1,
    justifyContent: 'flex-end',
  },
  modalContent: {
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    padding: 20,
    maxHeight: '80%',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  modalTabs: {
    flexDirection: 'row',
    marginBottom: 20,
    gap: 10,
  },
  modalTab: {
    flex: 1,
    paddingVertical: 10,
    alignItems: 'center',
    borderRadius: 8,
  },
  activeModalTab: {
    backgroundColor: '#e74c3c',
  },
  modalTabText: {
    fontSize: 16,
    fontWeight: '600',
  },
  modalList: {
    maxHeight: '60%',
  },
  modalItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 15,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginBottom: 10,
  },
  selectedModalItem: {
    backgroundColor: '#e74c3c',
  },
  modalItemText: {
    fontSize: 16,
  },
  modalDoneButton: {
    backgroundColor: '#e74c3c',
    paddingVertical: 15,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 20,
  },
  modalDoneButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  categoryHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  selectedCategory: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    gap: 5,
  },
  selectedCategoryText: {
    fontSize: 14,
  },
  addCategoryButton: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 5,
  },
}); 